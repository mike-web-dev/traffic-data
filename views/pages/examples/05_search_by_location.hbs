{{#section 'header'}}
    <!-- Mapbox Geocoder -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
    <link
            rel="stylesheet"
            href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
            type="text/css"
    />

    <style>

        /* Map */
        .map {
            position: absolute;
            top: 0;
            left: 0;
            right: 350px;
            bottom: 0;
            height: auto;
            z-index: 0;
        }

        /* Search Menu */
        .searchMenu {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 350px;
            height: 100%;
            padding: 10px 20px;
            z-index: 0;
        }

        #infoCard {
            right: 360px;
        }

        /* Mobile View */
        @media only screen and (max-width: 991px) {
            main {
                position: relative;
                display: block;
                width: 100%;
                height: auto;
                margin-bottom: 43px;
            }

            .map {
                position: relative;
                display: block;
                width: 100%;
                height: 70vw;
                right: 0px;
                bottom: auto;
            }

            .mapContainer {
                position: relative;
                left: 0;
                right: 0;
                bottom: auto;
                width: 100%;
                margin-bottom: 0;
            }

            .searchMenu {
                position: relative!important;
                width: 100%;
                height: auto;
                min-height: 30vh;
            }

            #infoCard {
                position: relative;
                top: 0;
                left: 0;
                right: 0;
                bottom: auto;
                width: 100%;
                max-width: 100vw;
                border: none;
            }
        }

        /* Geocoder Style Overiders */
        #geocoder {
            z-index: 1;
            width: 100%;
            top: 20px;
            border-radius: 0;
        }

        .mapboxgl-ctrl-geocoder {
            min-width: 100%;
            box-shadow: none;
            border-radius: 0;
            border: 1px solid #ccc;
        }

        .mapboxgl-ctrl-geocoder .suggestions {
            border-radius: 0;
        }


    </style>
{{/section}}

<div class="mapContainer">
    {{> info}}
    <div id="map" class="map"></div>

</div>

<!--Menu-->
<div class="searchMenu">
    <!--Filter Options-->
    <h4 class="mt-2 text-secondary">Search</h4>
    <hr class="my-1">
    <!--Geocoder-->
    <label class="form-label text-muted">Search by Address</label>
    <div id="geocoder" class="mb-2"></div>

    <div class="form-group mb-4">
        <div class="row">
            <div class="col">
                <label class="form-label text-muted">Radius</label>
            </div>
            <div class="col text-right">
                <label class="form-label text-lowercase"><span id="radiusLabel">100</span>m</label>
            </div>
        </div>
        <input id="searchRadius" type="range" min="100" max="5000" value="100"
               class="form-control-range">
    </div>

    <!--Reset / Search-->
    <div class="text-right">
        <a id="locationReset" type="button" class="btn btn-danger text-white">Reset</a>
        <a id="locationSearch" type="button" class="btn btn-primary text-white">Search</a>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="dataModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
     aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
        <div class="modal-content">

            <div class="modal-header bg-primary text-white">
                <!-- Modal Title -->
                <h5 class="modal-title">
                    Count Point ID -
                    <span id="dataModalLabel"></span>
                </h5>

                <!-- Close Modal -->
                <a type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </a>

            </div>
            <div id="dataModalBody" class="modal-body">

                <!-- Results Table -->
                <table id="dataTable" class="display table" width="100%"></table>

            </div>
            <div class="modal-footer">

                <!-- Close Modal -->
                <a type="button" class="btn btn-secondary" data-dismiss="modal">Close</a>

            </div>
        </div>
    </div>
</div>

{{#section 'script'}}

    <!-- D3.js -->
    <script src="/js/d3/d3.v5.min.js"></script>

    <!-- turf.js -->
    <script src="/js/turf.min.js"></script>

    <script>

        // Search result default
        let locationSearch = {
            coordinates: [-3.70, 50.72],
            radius: 100
        }

        // Radius geojson
        let locationRadius = {
            "type": "FeatureCollection",
            "features": []
        }

        // Data placeholder
        let selected = null; // selected feature
        let geojson = null; // geojson

        // Mapbox token
        mapboxgl.accessToken = "{{mapboxToken}}";

        // Create the Map
        let map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location
            center: [-3.70, 50.72], // starting position [lng, lat]
            zoom: 8 // starting zoom
        });

        // Bounding Box (bbox) for Devon
        let bbox = [
            [-2.83, 51.25],
            [-4.56, 50.18]
        ];

        // Set the map to the bbox
        map.fitBounds(bbox, {
            padding: 20 // Add some padding around bbox
        });

        // Add Navigation control
        map.addControl(new mapboxgl.NavigationControl(), 'top-left');

        // Add Current Location control
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }), 'top-left');

        // Add map Scale
        map.addControl(new mapboxgl.ScaleControl({
            maxWidth: 80,
            unit: 'metric'
        }), 'bottom-right');

        // Create Popup
        let popup = new mapboxgl.Popup({
            closeButton: false,
            closeOnClick: false,
            maxWidth: '350px'
        });

        function closePopup(){
            popup.remove();
            selected = null;
        }

        // Map is Loaded
        map.on('load', function () {

            map.addSource('radius', {
                'type': 'geojson',
                'data': locationRadius
            });

            map.addLayer({
                'id': 'radius',
                'source': 'radius',
                'type': 'line',
                // set the style of the features
                'paint': {
                    'line-color': '#ff0000',
                    'line-dasharray': [2, 3]
                },
                'layout': {
                    'visibility': 'none'
                }
            });

            // Count Point Locations filtered and converted using QGIS
            let locations = d3.json("/data/locations.geojson").then(function (values) {

                geojson = values;

                // Add layer from geojson
                map.addSource('locations', {
                    'type': 'geojson',
                    'data': geojson
                });

                // Create Layer from Source
                map.addLayer({
                    'id': 'points',
                    'source': 'locations',
                    'type': 'circle',
                    // set the style of the features
                    'paint': {
                        'circle-radius': 5,
                        'circle-color': '#008cba',
                        'circle-stroke-color': '#fff',
                        'circle-stroke-width': 2
                    }
                });

                // Change the cursor style as a UI indicator.
                map.on('mouseenter', 'points', function () {
                    map.getCanvas().style.cursor = 'pointer';
                });

                // Change the cursor style to default.
                map.on('mouseleave', 'points', function () {
                    map.getCanvas().style.cursor = '';
                });

                // if no features selected close popup and reset layer paint properties
                map.on('click', function () {
                    closePopup();
                });

                // Map Interaction - Click on Feature
                map.on('click', 'points', function (e) {

                    // features exist
                    if (e.features.length > 0) {

                        // select closest/first feature
                        selected = e.features[0];

                        // Create a Coordinates pair
                        let coordinates = e.features[0].geometry.coordinates.slice();

                        // Ensure that if the map is zoomed out such that multiple
                        // copies of the feature are visible, the popup appears
                        // over the copy being pointed to.
                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                        }

                        // Animate map to location
                        map.easeTo({center: coordinates, zoom: map.getZoom() < 9 ? 9 : map.getZoom()});

                        //Create the popup description
                        let description = `
                            <div id="customPopupDetails" class="card border-light mb-3">
                                <div class="card-header bg-primary text-white border-0">
                                    Count Location ID - ` + selected.properties.count_point_id + `
                                    <a type="button" class="close" onclick="closePopup()">×</a>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="text-muted">Region</label>
                                            <p>` + selected.properties.region_name + `</p>
                                        </div>
                                        <div class="col-6">
                                            <label class="text-muted">Local Authority</label>
                                            <p>` + selected.properties.local_authority_name + `</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="text-muted">Road Name</label>
                                            <p>` + selected.properties.road_name + `</p>
                                        </div>
                                        <div class="col-6">
                                            <label class="text-muted">Road Type</label>
                                            <p>` + selected.properties.road_type + `</p>
                                        </div>
                                    </div>
                                </div>
                            </div>`;

                        // Add the Popup to the map
                        popup
                                .setLngLat(coordinates)
                                .setHTML(description)
                                .addTo(map);

                    }

                });

            }).catch(function (error) {
                console.log({error: error});
            });

        });

        let geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            placeholder: 'Search by Address',
            types: 'country,region,place,postcode,locality,neighborhood',
            bbox: [-4.56, 50.18, -2.83, 51.25]
        });

        geocoder.addTo('#geocoder');

        geocoder.on('result', function (response) {
            locationSearch.coordinates = response.result.geometry.coordinates;
        });

        $("#searchRadius").change(function(){
            locationSearch.radius = $(this).val();
            $('#radiusLabel').html($(this).val());
        });

        $('#locationReset').click(function () {
            $('#searchRadius').val(100);
            locationSearch = {
                coordinates: [-3.70, 50.72],
                radius: 100
            }
            mapReset();
        });

        $('#locationSearch').click(function () {

            let point = turf.point(locationSearch.coordinates);
            let buffered = turf.buffer(point, locationSearch.radius, {units: 'meters'});
            let bbox = turf.bbox(buffered);

            map.getSource('radius').setData(buffered);

            map.setLayoutProperty('radius', 'visibility', 'visible');

            map.fitBounds(bbox, {
                padding: 20
            });

            let pointsWithin = turf.pointsWithinPolygon(geojson, buffered);

            if(pointsWithin.features.length){
                let styleExpression = [
                    'match',
                    ['get', 'count_point_id'],
                ]

                for(let i=0; i < pointsWithin.features.length; i++) {
                    let feature = pointsWithin.features[i];
                    styleExpression.push(feature.properties.count_point_id, '#fd7e14');
                }

                styleExpression.push('#008cba');

                map.setPaintProperty('points', 'circle-color', styleExpression);
            }



        });

        // Reset map
        function mapReset() {
            popup.remove();
            map.setPaintProperty('points', 'circle-color', '#008cba');
            map.setLayoutProperty('radius', 'visibility', 'none');
            map.fitBounds([
                [-2.83, 51.25],
                [-4.56, 50.18]
            ], {
                padding: 20
            });

        }


    </script>
{{/section}}
